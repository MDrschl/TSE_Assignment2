H <- 3 # Forecast horizon
# simulate MA(3) process
ma.coeffs <- c(-0.5, 0.3, -0.2)
trajectories <- replicate(K, arima.sim(model = list(ma = ma.coeffs), n = N + H))
errors <- matrix(0, nrow = N + H, ncol = K)
for (k in 1:K) {
for (t in 4:(N + H)) {
errors[t, k] <- trajectories[t, k] - sum(ma.coeffs * errors[(t-1):(t-3), k], na.rm = TRUE)
}
}
### b) Optimal MSE Forecasts ----
optimal.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
for (t in 3:N) {
optimal.fc[t, 1, k] <- ma.coeffs[1] * errors[t, k] + ma.coeffs[2] * errors[t-1, k] + ma.coeffs[3] * errors[t-2, k]
optimal.fc[t, 2, k] <- ma.coeffs[2] * errors[t, k] + ma.coeffs[3] * errors[t-1, k]
optimal.fc[t, 3, k] <- ma.coeffs[3] * errors[t, k]
}
}
# Print first few forecasts for trajectory 1
print(optimal.fc[1:10, , 1])
# Initiate a vector for the MSE for the H forecast periods
optimal.mse <- numeric(H)
# loop over the three forecasting periods
for (h in 1:H) {
# initiate an vector to store error terms
errors.squ <- numeric(K)
# loop over each trajectory
for (k in 1:K) {
# for each period to forecast, subtract the forecast from the previous period
errors.fc <- trajectories[(N + h), k] - (trajectories[N,k] + optimal.fc[N,h,k])
# square result
errors.squ[k] <- errors.fc^2
}
# take mean over all trajectories
optimal.mse[h] <- mean(errors.squ)
}
print(optimal.mse[1])
### c) Approach 1: Naive Error Sequence Reconstruction ----
### c) Approach 1: Naive Error Sequence Reconstruction ----
err.recon <- matrix(0, nrow = N + H, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
# DIFFERENCE: Assumes initial error terms are zero
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t, k] - sum(ma.coeffs * errors[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t, k] + ma.coeffs[2] * err.recon[t-1, k] + ma.coeffs[3] * err.recon[t-2, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t, k] + ma.coeffs[3] * err.recon[t-1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
# DIFFERENCE: Uses naive forecasts instead of optimal forecasts
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
### d) Approach 2: Projection Method ----
all.equal(errors, err.recon)
rm(list = ls(all = TRUE))
library(tidyverse)
library(tseries)
library(readxl)
library(ggfortify)
library(accelerometry)
library(zoo)
set.seed(2025)
### a) Simulation ----
K <- 1000 # Number of trajectories
N <- 100 # In-sample size
H <- 3 # Forecast horizon
# simulate MA(3) process
ma.coeffs <- c(-0.5, 0.3, -0.2)
trajectories <- replicate(K, arima.sim(model = list(ma = ma.coeffs), n = N + H))
errors <- matrix(0, nrow = N + H, ncol = K)
for (k in 1:K) {
for (t in 4:(N + H)) {
errors[t, k] <- trajectories[t, k] - sum(ma.coeffs * errors[(t-1):(t-3), k], na.rm = TRUE)
}
}
### b) Optimal MSE Forecasts ----
optimal.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
for (t in 3:N) {
optimal.fc[t, 1, k] <- ma.coeffs[1] * errors[t, k] + ma.coeffs[2] * errors[t-1, k] + ma.coeffs[3] * errors[t-2, k]
optimal.fc[t, 2, k] <- ma.coeffs[2] * errors[t, k] + ma.coeffs[3] * errors[t-1, k]
optimal.fc[t, 3, k] <- ma.coeffs[3] * errors[t, k]
}
}
# Print first few forecasts for trajectory 1
print(optimal.fc[1:10, , 1])
# Initiate a vector for the MSE for the H forecast periods
optimal.mse <- numeric(H)
# loop over the three forecasting periods
for (h in 1:H) {
# initiate an vector to store error terms
errors.squ <- numeric(K)
# loop over each trajectory
for (k in 1:K) {
# for each period to forecast, subtract the forecast from the previous period
errors.fc <- trajectories[(N + h), k] - (trajectories[N,k] + optimal.fc[N,h,k])
# square result
errors.squ[k] <- errors.fc^2
}
# take mean over all trajectories
optimal.mse[h] <- mean(errors.squ)
}
print(optimal.mse[1])
### c) Approach 1: Naive Error Sequence Reconstruction ----
### c) Approach 1: Naive Error Sequence Reconstruction ----
err.recon <- matrix(0, nrow = N + H, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
# DIFFERENCE: Assumes initial error terms are zero
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t, k] + ma.coeffs[2] * err.recon[t-1, k] + ma.coeffs[3] * err.recon[t-2, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t, k] + ma.coeffs[3] * err.recon[t-1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
# DIFFERENCE: Uses naive forecasts instead of optimal forecasts
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
### d) Approach 2: Projection Method ----
err.recon <- matrix(0, nrow = N + H, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t, k] + ma.coeffs[2] * err.recon[t-1, k] + ma.coeffs[3] * err.recon[t-2, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t, k] + ma.coeffs[3] * err.recon[t-1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
### d) Approach 2: Projection Method ----
innovations <- matrix(rnorm((N + H) * K), nrow = N + H, ncol = K)
# Simulate MA(3) process using these explicit innovations
trajectories <- apply(innovations, 2, function(eps) {
arima.sim(model = list(ma = ma.coeffs), n = N + H, innov = eps)
})
# Now you have direct access to the innovations:
head(innovations)
rm(list = ls(all = TRUE))
library(tidyverse)
library(tseries)
library(readxl)
library(ggfortify)
library(accelerometry)
library(zoo)
set.seed(2025)
### a) Simulation ----
K <- 1000 # Number of trajectories
N <- 100 # In-sample size
H <- 3 # Forecast horizon
ma.coeffs <- c(-0.5, 0.3, -0.2) # coefficient vector
errors <- matrix(rnorm((N + H) * K), nrow = N + H, ncol = K)
# simulate trajectories
trajectories <- apply(errors, 2, function(eps) {
arima.sim(model = list(ma = ma.coeffs), n = N + H, innov = eps)
})
optimal.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
for (t in 3:N) {
optimal.fc[t, 1, k] <- ma.coeffs[1] * errors[t, k] + ma.coeffs[2] * errors[t-1, k] + ma.coeffs[3] * errors[t-2, k]
optimal.fc[t, 2, k] <- ma.coeffs[2] * errors[t, k] + ma.coeffs[3] * errors[t-1, k]
optimal.fc[t, 3, k] <- ma.coeffs[3] * errors[t, k]
}
}
# Print first few forecasts for trajectory 1
print(optimal.fc[1:10, , 1])
# Initiate a vector for the MSE for the H forecast periods
optimal.mse <- numeric(H)
# loop over the three forecasting periods
for (h in 1:H) {
# initiate an vector to store error terms
errors.squ <- numeric(K)
# loop over each trajectory
for (k in 1:K) {
# for each period to forecast, subtract the forecast from the previous period
errors.fc <- trajectories[(N + h), k] - (trajectories[N,k] + optimal.fc[N,h,k])
# square result
errors.squ[k] <- errors.fc^2
}
# take mean over all trajectories
optimal.mse[h] <- mean(errors.squ)
}
print(optimal.mse[1])
print(optimal.mse)
err.recon <- matrix(0, nrow = N + H, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t, k] + ma.coeffs[2] * err.recon[t-1, k] + ma.coeffs[3] * err.recon[t-2, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t, k] + ma.coeffs[3] * err.recon[t-1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
rm(list = ls(all = TRUE))
library(tidyverse)
library(tseries)
library(readxl)
library(ggfortify)
library(accelerometry)
library(zoo)
set.seed(2025)
### a) Simulation ----
K <- 1000 # Number of trajectories
N <- 100 # In-sample size
H <- 3 # Forecast horizon
ma.coeffs <- c(-0.5, 0.3, -0.2) # coefficient vector
errors <- matrix(rnorm((N + H) * K), nrow = N + H, ncol = K)
# simulate trajectories
trajectories <- apply(errors, 2, function(eps) {
arima.sim(model = list(ma = ma.coeffs), n = N + H, innov = eps)
})
### b) Optimal MSE Forecasts ----
optimal.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
for (t in 3:N) {
optimal.fc[t, 1, k] <- ma.coeffs[1] * errors[t, k] + ma.coeffs[2] * errors[t-1, k] + ma.coeffs[3] * errors[t-2, k]
optimal.fc[t, 2, k] <- ma.coeffs[2] * errors[t, k] + ma.coeffs[3] * errors[t-1, k]
optimal.fc[t, 3, k] <- ma.coeffs[3] * errors[t, k]
}
}
# Print first few forecasts for trajectory 1
print(optimal.fc[1:10, , 1])
# Initiate a vector for the MSE for the H forecast periods
optimal.mse <- numeric(H)
# loop over the three forecasting periods
for (h in 1:H) {
# initiate an vector to store error terms
errors.squ <- numeric(K)
# loop over each trajectory
for (k in 1:K) {
# for each period to forecast, subtract the forecast from the previous period
errors.fc <- trajectories[(N + h), k] - (trajectories[N,k] + optimal.fc[N,h,k])
# square result
errors.squ[k] <- errors.fc^2
}
# take mean over all trajectories
optimal.mse[h] <- mean(errors.squ)
}
print(optimal.mse)
### c) Approach 1: Naive Error Sequence Reconstruction ----
err.recon <- matrix(0, nrow = N + H, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t, k] + ma.coeffs[2] * err.recon[t-1, k] + ma.coeffs[3] * err.recon[t-2, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t, k] + ma.coeffs[3] * err.recon[t-1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
### d) Approach 2: Projection Method ----
rm(list = ls(all = TRUE))
library(tidyverse)
library(tseries)
library(readxl)
library(ggfortify)
library(accelerometry)
library(zoo)
set.seed(2025)
### a) Simulation ----
K <- 1000 # Number of trajectories
N <- 100 # In-sample size
H <- 3 # Forecast horizon
# simulate MA(3) process
ma.coeffs <- c(-0.5, 0.3, -0.2)
trajectories <- replicate(K, arima.sim(model = list(ma = ma.coeffs), n = N + H))
errors <- matrix(0, nrow = N + H, ncol = K)
for (k in 1:K) {
for (t in 4:(N + H)) {
errors[t, k] <- trajectories[t, k] - sum(ma.coeffs * errors[(t-1):(t-3), k], na.rm = TRUE)
}
}
### b) Optimal MSE Forecasts ----
optimal.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
for (t in 3:N) {
optimal.fc[t, 1, k] <- ma.coeffs[1] * errors[t, k] + ma.coeffs[2] * errors[t-1, k] + ma.coeffs[3] * errors[t-2, k]
optimal.fc[t, 2, k] <- ma.coeffs[2] * errors[t, k] + ma.coeffs[3] * errors[t-1, k]
optimal.fc[t, 3, k] <- ma.coeffs[3] * errors[t, k]
}
}
# Print first few forecasts for trajectory 1
print(optimal.fc[1:10, , 1])
# Initiate a vector for the MSE for the H forecast periods
optimal.mse <- numeric(H)
# loop over the three forecasting periods
for (h in 1:H) {
# initiate an vector to store error terms
errors.squ <- numeric(K)
# loop over each trajectory
for (k in 1:K) {
# for each period to forecast, subtract the forecast from the previous period
errors.fc <- trajectories[(N + h), k] - (trajectories[N,k] + optimal.fc[N,h,k])
# square result
errors.squ[k] <- errors.fc^2
}
# take mean over all trajectories
optimal.mse[h] <- mean(errors.squ)
}
print(optimal.mse[1])
### c) Approach 1: Naive Error Sequence Reconstruction ----
err.recon <- matrix(0, nrow = N + H, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t, k] + ma.coeffs[2] * err.recon[t-1, k] + ma.coeffs[3] * err.recon[t-2, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t, k] + ma.coeffs[3] * err.recon[t-1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
### d) Approach 2: Projection Method ----
err.recon <- matrix(0, nrow = N + H + 2, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
# Adjust the loop to start from t = 4
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t - 2, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t + 2, k] + ma.coeffs[2] * err.recon[t + 1, k] + ma.coeffs[3] * err.recon[t, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t + 2, k] + ma.coeffs[3] * err.recon[t + 1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t + 2, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
rm(list = ls(all = TRUE))
library(tidyverse)
library(tseries)
library(readxl)
library(ggfortify)
library(accelerometry)
library(zoo)
set.seed(2025)
### a) Simulation ----
K <- 1000 # Number of trajectories
N <- 100 # In-sample size
H <- 3 # Forecast horizon
# simulate MA(3) process
ma.coeffs <- c(-0.5, 0.3, -0.2)
trajectories <- replicate(K, arima.sim(model = list(ma = ma.coeffs), n = N + H))
errors <- matrix(0, nrow = N + H, ncol = K)
for (k in 1:K) {
for (t in 4:(N + H)) {
errors[t, k] <- trajectories[t, k] - sum(ma.coeffs * errors[(t-1):(t-3), k], na.rm = TRUE)
}
}
### b) Optimal MSE Forecasts ----
optimal.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
for (t in 3:N) {
optimal.fc[t, 1, k] <- ma.coeffs[1] * errors[t, k] + ma.coeffs[2] * errors[t-1, k] + ma.coeffs[3] * errors[t-2, k]
optimal.fc[t, 2, k] <- ma.coeffs[2] * errors[t, k] + ma.coeffs[3] * errors[t-1, k]
optimal.fc[t, 3, k] <- ma.coeffs[3] * errors[t, k]
}
}
# Print first few forecasts for trajectory 1
print(optimal.fc[1:10, , 1])
# Initiate a vector for the MSE for the H forecast periods
optimal.mse <- numeric(H)
# loop over the three forecasting periods
for (h in 1:H) {
# initiate an vector to store error terms
errors.squ <- numeric(K)
# loop over each trajectory
for (k in 1:K) {
# for each period to forecast, subtract the forecast from the previous period
errors.fc <- trajectories[(N + h), k] - (trajectories[N,k] + optimal.fc[N,h,k])
# square result
errors.squ[k] <- errors.fc^2
}
# take mean over all trajectories
optimal.mse[h] <- mean(errors.squ)
}
print(optimal.mse[1])
### c) Approach 1: Naive Error Sequence Reconstruction ----
err.recon <- matrix(0, nrow = N + H + 2, ncol = K)
approach1.fc <- array(0, dim = c(N, H, K))
for (k in 1:K) {
err.recon[1, k] <- 0
err.recon[2, k] <- 0
err.recon[3, k] <- 0
# Adjust the loop to start from t = 4
for (t in 4:(N + H)) {
err.recon[t, k] <- trajectories[t - 2, k] - sum(ma.coeffs * err.recon[(t-1):(t-3), k], na.rm = TRUE)
}
for (t in 3:N) {
approach1.fc[t, 1, k] <- ma.coeffs[1] * err.recon[t + 2, k] + ma.coeffs[2] * err.recon[t + 1, k] + ma.coeffs[3] * err.recon[t, k]
approach1.fc[t, 2, k] <- ma.coeffs[2] * err.recon[t + 2, k] + ma.coeffs[3] * err.recon[t + 1, k]
approach1.fc[t, 3, k] <- ma.coeffs[3] * err.recon[t + 2, k]
}
}
approach1.mse <- numeric(H)
for (h in 1:H) {
errors.squ <- numeric(K)
for (k in 1:K) {
errors.fc <- trajectories[N + h, k] - (trajectories[N, k] + approach1.fc[N, h, k])
errors.squ[k] <- errors.fc^2
}
approach1.mse[h] <- mean(errors.squ)
}
print(approach1.mse)
print(optimal.mse)
### d) Approach 2: Projection Method ----
